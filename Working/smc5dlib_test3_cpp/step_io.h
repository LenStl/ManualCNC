#pragma once
#include <cstdio>
#include <windows.h>

constexpr auto TWO_PI = 6.2831855;

using namespace System;
using namespace De::Boenigk::SMC5D::Settings;
using namespace De::Boenigk::SMC5D::Basics;
using namespace De::Boenigk::SMC5D::Move;

using namespace System::Xml;

class StepIO
{
	public:
		/**
		 * Generates a list of steps for the SMC5D controller to move along a 2D-AABB.
		 *
		 * @param min_x - Minimum and starting x coordinate of the square.
		 * @param min_y - Minimum and starting y coordinate of the square.
		 * @param max_x - Maximum x coordinate of the square.
		 * @param max_y - Maximum y coordinate of the square.
		 * @param height - Constant traveling height at which the head moves.
		 * @param speed - Constant speed at which the head moves between steps.
		 * @param smc_settings - SMCSettings of the targeted connector.
		 * @return A StepList^ of steps representing a square.
		 */
		static StepList^ generate_square(float min_x, float min_y, float max_x, float max_y, float height, float speed, SMCSettings^ smc_settings);

		/**
		 * Generates a list of steps for the SMC5D controller to linearly move along a line.
		 *
		 * @param start_x - Starting x coordinate of the line.
		 * @param start_y - Starting y coordinate of the line.
		 * @param end_x - End x coordinate of the line.
		 * @param end_y - End y coordinate of the line.
		 * @param height - Constant traveling height at which the head moves.
		 * @param speed - Constant speed at which the head moves between steps.
		 * @param smc_settings - SMCSettings of the targeted connector.
		 * @return A StepList^ of steps representing a line.
		 */
		static StepList^ generate_line(float start_x, float start_y, float end_x, float end_y, float height, float speed, SMCSettings^ smc_settings);

		/**
		 * Generates a list of steps for the SMC5D controller to move along a circle.
		 *
		 * @param center_x - X coordinate of the center of the circle.
		 * @param center_y - Y coordinate of the center of the circle.
		 * @param radius - Radius of the circle.
		 * @param height - Constant traveling height at which the head moves.
		 * @param speed - Constant speed at which the head moves between steps.
		 * @param divisions - Number of linear segments.
		 * @param smc_settings - SMCSettings of the targeted connector.
		 * @return A StepList^ of steps representing a circle.
		 */
		static StepList^ generate_circle(float center_x, float center_y, float radius, float height, float speed, unsigned int divisions, SMCSettings^ smc_settings);

		/**
		 * Reads the polygon coordinates from a .grf4 file and converts them to a list of steps.
		 *
		 * @param file_path - Path to a .grf4 file with ordered segment coordinates on a curve.
		 * @param height - Constant traveling height at which the head moves.
		 * @param speed - Constant speed at which the head moves between steps.
		 * @param smc_settings - SMCSettings of the targeted connector.
		 * @return A StepList^ of linearly interpolated steps representing the curve defined in file_path.
		 */
		static StepList^ load_grf4(System::String^ file_path, float height, float speed, SMCSettings^ smc_settings);

		// .sl (Step List) => File format generated by StepWriter::Write().
		/**
		 * Reads the coordinates from a binary .sl (Step List) file and converts them to a list of steps.
		 *
		 * @param file_path - Path to a .sl (Step List) file with ordered segment coordinates on a curve.
		 * @param smc_settings - SMCSettings of the targeted connector.
		 * @return A StepList^ of linearly interpolated steps representing the curve defined in file_path.
		 */
		static StepList^ load_binary(System::String^ file_path, SMCSettings^ smc_settings);
		
		/**
		 * Writes the coordinates from a list of steps to file_path in binary.
		 *
		 * @param file_path - Path to a .sl (Step List) file to write to.
		 * @param smc_settings - SMCSettings of the targeted connector.
		 */
		static void write_binary(System::String^ file_path, StepList^ step_list);
};
